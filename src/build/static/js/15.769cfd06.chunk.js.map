{"version":3,"sources":["@core/components/input-password-toggle/index.js","views/pages/authentication/Login.js"],"names":["InputPasswordToggle","forwardRef","props","ref","label","hideIcon","showIcon","visible","className","htmlFor","placeholder","iconSize","inputClassName","invalid","rest","useState","inputVisibility","setInputVisibility","for","classnames","type","id","onClick","size","renderIcon","defaultProps","ToastContent","t","name","role","color","icon","toast","dismiss","defaultValues","password","loginEmail","Login","skin","useSkin","dispatch","useDispatch","navigate","useNavigate","ability","useContext","AbilityContext","useForm","control","setError","handleSubmit","errors","formState","illustration","source","require","default","to","e","preventDefault","lg","sm","src","alt","md","tag","onSubmit","data","Object","values","every","field","length","useJwt","login","email","then","res","userData","accessToken","refreshToken","handleLogin","update","getHomeRouteForLoggedInUser","fullName","username","catch","err","error","console","log","key","render","autoFocus","block"],"mappings":"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","file":"static/js/15.769cfd06.chunk.js","sourcesContent":["// ** React Imports\r\nimport { Fragment, useState, forwardRef } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Eye, EyeOff } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\r\n\r\nconst InputPasswordToggle = forwardRef((props, ref) => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    invalid,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? (\r\n        <Label className='form-label' for={htmlFor}>\r\n          {label}\r\n        </Label>\r\n      ) : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className,\r\n          'is-invalid': invalid\r\n        })}\r\n      >\r\n        <Input\r\n          ref={ref}\r\n          invalid={invalid}\r\n          type={inputVisibility === false ? 'password' : 'text'}\r\n          placeholder={placeholder ? placeholder : '············'}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\r\n          {renderIcon()}\r\n        </InputGroupText>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n})\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  invalid: PropTypes.bool,\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props['htmlFor'] === 'undefined') {\r\n      throw new Error('htmlFor prop is required when label prop is present')\r\n    }\r\n  },\r\n  htmlFor(props, propName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props['label'] === 'undefined') {\r\n      throw new Error('label prop is required when htmlFor prop is present')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n","// ** React Imports\r\nimport { useContext } from 'react'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\n\r\n// ** Custom Hooks\r\nimport { useSkin } from '@hooks/useSkin'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\n\r\n// ** Third Party Components\r\nimport toast from 'react-hot-toast'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useForm, Controller } from 'react-hook-form'\r\nimport { Facebook, Twitter, Mail, GitHub, HelpCircle, Coffee, X } from 'react-feather'\r\n\r\n// ** Actions\r\nimport { handleLogin } from '@store/authentication'\r\n\r\n// ** Context\r\nimport { AbilityContext } from '@src/utility/context/Can'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\nimport InputPasswordToggle from '@components/input-password-toggle'\r\n\r\n// ** Utils\r\nimport { getHomeRouteForLoggedInUser } from '@utils'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col, Form, Input, Label, Alert, Button, CardText, CardTitle, UncontrolledTooltip } from 'reactstrap'\r\n\r\n// ** Styles\r\nimport '@styles/react/pages/page-authentication.scss'\r\n\r\nconst ToastContent = ({ t, name, role }) => {\r\n  return (\r\n    <div className='d-flex'>\r\n      <div className='me-1'>\r\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\r\n      </div>\r\n      <div className='d-flex flex-column'>\r\n        <div className='d-flex justify-content-between'>\r\n          <h6>{name}</h6>\r\n          <X size={12} className='cursor-pointer' onClick={() => toast.dismiss(t.id)} />\r\n        </div>\r\n        <span>You have successfully logged in as an {role} user to Admin Panel!</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst defaultValues = {\r\n  password: 'admin',\r\n  loginEmail: 'admin@demo.com'\r\n}\r\n\r\nconst Login = () => {\r\n  // ** Hooks\r\n  const { skin } = useSkin()\r\n  const dispatch = useDispatch()\r\n  const navigate = useNavigate()\r\n  const ability = useContext(AbilityContext)\r\n  const {\r\n    control,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm({ defaultValues })\r\n  const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg',\r\n    source = require(`@src/assets/images/pages/${illustration}`).default\r\n\r\n  const onSubmit = data => {\r\n    if (Object.values(data).every(field => field.length > 0)) {\r\n      useJwt\r\n        .login({ email: data.loginEmail, password: data.password })\r\n        .then(res => {\r\n          const data = { ...res.data.userData, accessToken: res.data.accessToken, refreshToken: res.data.refreshToken }\r\n          dispatch(handleLogin(data))\r\n          ability.update(res.data.userData.ability)\r\n          navigate(getHomeRouteForLoggedInUser(data.role))\r\n          toast(t => (\r\n            <ToastContent t={t} role={data.role || 'admin'} name={data.fullName || data.username || 'John Doe'} />\r\n          ))\r\n        })\r\n        .catch(\r\n          err => {\r\n            toast.error('Authentication Failed!')\r\n            console.log('err', err)\r\n          }\r\n        )\r\n    } else {\r\n      for (const key in data) {\r\n        if (data[key].length === 0) {\r\n          setError(key, {\r\n            type: 'manual'\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='auth-wrapper auth-cover'>\r\n      <Row className='auth-inner m-0'>\r\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\r\n\r\n          <h2 className='brand-text text-primary ms-1'>Administrator</h2>\r\n        </Link>\r\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\r\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\r\n            <img className='img-fluid' src={source} alt='Login Cover' />\r\n          </div>\r\n        </Col>\r\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\r\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\r\n            <CardTitle tag='h2' className='fw-bold mb-1'>\r\n              Admin Panel! 👋\r\n            </CardTitle>\r\n            <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\r\n              <div className='mb-1'>\r\n                <Label className='form-label' for='login-email'>\r\n                  Email\r\n                </Label>\r\n                <Controller\r\n                  id='loginEmail'\r\n                  name='loginEmail'\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      autoFocus\r\n                      type='email'\r\n                      placeholder='john@example.com'\r\n                      invalid={errors.loginEmail && true}\r\n                      {...field}\r\n                    />\r\n                  )}\r\n                />\r\n              </div>\r\n              <div className='mb-1'>\r\n                <div className='d-flex justify-content-between'>\r\n                  <Label className='form-label' for='login-password'>\r\n                    Password\r\n                  </Label>\r\n                  {/* <Link to='/forgot-password'>\r\n                    <small>Forgot Password?</small>\r\n                  </Link> */}\r\n                </div>\r\n                <Controller\r\n                  id='password'\r\n                  name='password'\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <InputPasswordToggle className='input-group-merge' invalid={errors.password && true} {...field} />\r\n                  )}\r\n                />\r\n              </div>\r\n              <div className='form-check mb-1'>\r\n                <Input type='checkbox' id='remember-me' />\r\n                <Label className='form-check-label' for='remember-me'>\r\n                  Remember Me\r\n                </Label>\r\n              </div>\r\n              <Button type='submit' color='primary' block>\r\n                Sign in\r\n              </Button>\r\n            </Form>\r\n            {/* <p className='text-center mt-2'>\r\n              <span className='me-25'>New on our platform?</span>\r\n              <Link to='/register'>\r\n                <span>Create an account</span>\r\n              </Link>\r\n            </p>\r\n            <div className='divider my-2'>\r\n              <div className='divider-text'>or</div>\r\n            </div>\r\n            <div className='auth-footer-btn d-flex justify-content-center'>\r\n              <Button color='facebook'>\r\n                <Facebook size={14} />\r\n              </Button>\r\n              <Button color='twitter'>\r\n                <Twitter size={14} />\r\n              </Button>\r\n              <Button color='google'>\r\n                <Mail size={14} />\r\n              </Button>\r\n              <Button className='me-0' color='github'>\r\n                <GitHub size={14} />\r\n              </Button>\r\n            </div> */}\r\n          </Col>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login\r\n"],"sourceRoot":""}